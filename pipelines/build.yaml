---

trigger:
  branches:
    exclude:
      - main
  tags:
    include:
      - "*.*.*"

variables:
  - template: templates/variables/global_vars.yaml
  # - name: SHELLOPTS
  #   value: errexit:pipefail

pool:
  vmImage: ubuntu-latest

stages:
  # Tag stage is only executed when a tag is pushed to the repository.
  - ${{ if and( eq(variables['Build.Reason'], 'IndividualCI'), startsWith(variables['Build.SourceBranch'], 'refs/tags/') ) }}:
      - stage: Tag
        displayName: Tag
        dependsOn: []
        condition: or( eq(variables.buildRequestedForPipeline, 'false'), startsWith(variables['Build.SourceBranch'], 'refs/tags/') )
        jobs:
          - job: Tag
            displayName: Tag pipeline build
            steps:
              - checkout: none
              - script: |
                  echo "##vso[build.addbuildtag]release"
                displayName: Add pipeline build tag 'release'

  - stage: Prepare
    displayName: Prepare
    dependsOn: []
    jobs:
      - job:
        displayName: Build devcontainer
        steps:
          - task: Docker@2
            displayName: Login to DockerHub
            inputs:
              command: login
              containerRegistry: dockerhub

          - script: |
              make dev/container
            displayName: Build devcontainer image
            env:
              IMAGE_TAG: $(Build.SourceVersion)

          - script: |
              make dev/container/push
            displayName: Push devcontainer image
            env:
              IMAGE_TAG: $(Build.SourceVersion)

  - stage: Lint
    displayName: Lint
    dependsOn: Prepare
    jobs:
      - job: LintHelm
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        displayName: Lint Helm chart
        steps:
          - script: make lint/helm
            displayName: Lint Helm chart

      - job: LintDockerfiles
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        displayName: Lint Dockerfiles
        steps:
          - script: make lint/dockerfiles
            displayName: Run Dockerfile linter

      - job: LintMarkdown
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        displayName: Lint Markdown files
        steps:
          - script: make lint/markdown
            displayName: Lint Markdown files

      # - job: LintGoLang
      #   displayName: Lint Go files
      #   steps:
      #     - script: make lint/go
      #       displayName: Lint Go files

      - job: LintYaml
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        displayName: Lint Yaml
        steps:
          - script: make lint/yaml
            displayName: Lint yaml files

      - job: LintSpelling
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        displayName: Lint spelling
        steps:
          - script: make lint/spelling
            displayName: Run spelling linter

  - stage: Build
    displayName: Build
    dependsOn: Prepare
    jobs:
      - job:
        displayName: Image
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        steps:

          - task: Docker@2
            displayName: Login to ghcr.io
            inputs:
              command: login
              containerRegistry: github

          - template: templates/steps/bump-version.yaml

          - script: make image/build
            displayName: Build image

          - script: make image/save
            displayName: Save image to .tar file

          - script: make image/save/compress
            displayName: Compress saved image .tar to .tar.gz

          - task: CopyFiles@2
            displayName: 'Copy image to artifact staging directory'
            inputs:
              contents: '.artifacts/**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
              flattenFolders: true

          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: Publish image as pipeline artifact
            artifact: container-image-$(global_imageName)

      - job:
        displayName: Chart
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        steps:

          - template: templates/steps/bump-version.yaml

          - script: make helm/package
            displayName: Package Helm chart
            env:
              ARTIFACTS_ROOT_DIR: .artifacts

          - task: CopyFiles@2
            displayName: 'Copy Helm chart to artifact staging directory'
            inputs:
              contents: '.artifacts/**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
              flattenFolders: true

          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: Publish Helm chart as pipeline artifact
            artifact: helm-chart-$(global_chartName)

  - stage: Test
    displayName: Test
    dependsOn: Build
    jobs:
      - job: Test
        container: docker.io/bamaas/devcontainer:gofit-$(Build.SourceVersion)
        displayName: Run tests
        steps:

          - template: templates/steps/bump-version.yaml

          - template: templates/steps/load-image-from-pipeline-artifacts.yaml
            parameters:
              image: $(global_imageName)
              downloadArtifactFrom: currentPipeline

          - template: templates/steps/load-chart-from-pipeline-artifacts.yaml
            parameters:
              chartName: $(global_chartName)
              downloadArtifactFrom: currentPipeline

          - script: make cluster
            displayName: Create KinD cluster

          - script: make cluster/load_image
            displayName: Load image to KinD cluster

          - script: make helm/install
            displayName: Install Helm chart in KinD cluster
            env:
              CHART_PATH: $(chartPath)  # Variable set in the load-chart-from-pipeline-artifacts.yaml template
