---
parameters:
  - name: image
    type: string

  - name: downloadArtifactFrom
    type: string    ## options: 'currentPipeline', 'buildPipeline'

steps:
  - script: |
      PARAM_VALUE=${{ parameters.downloadArtifactFrom }}
      if [ "${PARAM_VALUE}" == "buildPipeline" ] || [ "${PARAM_VALUE}" == "currentPipeline" ]; then
          exit 0
      else
          echo "ERROR: '${PARAM_VALUE}' is an unsupported value for 'downloadArtifactFrom' parameter. Supported values are: 'currentPipeline', 'buildPipeline'"
          exit 1
      fi
    displayName: Validate 'downloadArtifactFrom' parameter value is valid

  - script: |
      buildArtifactName="container-image-${{ parameters.image }}"
      echo "##vso[task.setvariable variable=artifactName]${buildArtifactName}"
      echo "Defined artifactName variable: ${buildArtifactName}"
    displayName: Define artifactName task variable based on image parameter.

  - task: DownloadPipelineArtifact@2
    displayName: Download ${{ parameters.image }} image pipeline artifact
    inputs:
      targetPath: $(Build.Repository.LocalPath)/.artifacts/$(artifactName)
      artifactName: $(artifactName)
      ${{ if eq(parameters.downloadArtifactFrom, 'buildPipeline') }}:
        buildType: specific
        specificBuildWithTriggering: true
        project: $(resources.pipeline.buildPipeline.ProjectID)
        definition: $(resources.pipeline.buildPipeline.pipelineID)
        buildVersionToDownload: specific
        pipelineId: $(resources.pipeline.buildPipeline.runID)

  # Be careful changing the step variable $(fullImageNameAndTag), other templates might depend on it. For example: scan-image-from-pipeline-artifacts.yaml
  - script: |
        img=$(make image/load)
        echo "Successfully loaded image: ${img}"
        echo "##vso[task.setvariable variable=fullImageNameAndTag]${img}"
        echo "Defined fullImageNameAndTag task variable value: ${img}"
    displayName: Load ${{ parameters.image }} image
    env:
      ARTIFACTS_ROOT_DIR: $(Build.Repository.LocalPath)/.artifacts

  - script: |
      tag=$(echo $(fullImageNameAndTag) | cut -d ':' -f 2)
      echo "##vso[task.setvariable variable=imageTag]${tag}"
      echo "Defined imageTag task variable: ${tag}"
    displayName: Define imageTag task variable
